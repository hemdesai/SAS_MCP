{"version":3,"sources":["ChatBot.js","App.js","reportWebVitals.js","index.js"],"names":["ChatBot","messages","setMessages","useState","role","content","input","setInput","loading","setLoading","bottomRef","useRef","useEffect","_bottomRef$current","current","scrollIntoView","behavior","React","createElement","style","maxWidth","margin","background","borderRadius","boxShadow","padding","minHeight","maxHeight","overflowY","marginBottom","map","msg","idx","key","textAlign","display","table","columns","rows","borderCollapse","col","i","border","row","cell","j","renderTable","ref","onSubmit","async","e","preventDefault","trim","userMsg","msgs","resp","fetch","method","headers","Content-Type","body","JSON","stringify","prompt","ok","err","json","detail","data","answerText","answer","message","gap","type","value","onChange","target","placeholder","flex","disabled","className","marginTop","color","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.bb5a707a.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\n\nfunction renderTable(table) {\n  if (!table || !table.columns || !table.rows) return null;\n  return (\n    <table style={{ margin: '10px auto', borderCollapse: 'collapse' }}>\n      <thead>\n        <tr>\n          {table.columns.map((col, i) => (\n            <th key={i} style={{ border: '1px solid #ccc', padding: '4px 8px' }}>{col}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {table.rows.map((row, i) => (\n          <tr key={i}>\n            {row.map((cell, j) => (\n              <td key={j} style={{ border: '1px solid #ccc', padding: '4px 8px' }}>{cell}</td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default function ChatBot() {\n  const [messages, setMessages] = useState([\n    { role: 'assistant', content: 'Hi! Ask me to add numbers (e.g., \"Add 2, 3, 5, 7\"). I will use the SAS MCP server.' }\n  ]);\n  const [input, setInput] = useState('');\n  const [loading, setLoading] = useState(false);\n  const bottomRef = useRef(null);\n\n  useEffect(() => {\n    // eslint-disable-next-line no-unused-expressions\n    bottomRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  async function handleSend(e) {\n    e.preventDefault();\n    if (!input.trim()) return;\n    const userMsg = { role: 'user', content: input };\n    setMessages(msgs => [...msgs, userMsg]);\n    setInput('');\n    setLoading(true);\n    try {\n      // Send to backend /chatbot (uses MCP server directly)\n      const resp = await fetch('/chatbot', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ prompt: input })\n      });\n      if (!resp.ok) {\n        const err = await resp.json();\n        setMessages(msgs => [...msgs, { role: 'assistant', content: err.detail || 'Error from backend.' }]);\n        setLoading(false);\n        return;\n      }\n      const data = await resp.json();\n      let table = data.table;\n      let answerText = data.answer || data.message || 'Job complete.';\n      setMessages(msgs => [\n        ...msgs,\n        { role: 'assistant', content: answerText, table }\n      ]);\n    } catch (err) {\n      setMessages(msgs => [...msgs, { role: 'assistant', content: 'Error: ' + err.message }]);\n    }\n    setLoading(false);\n  }\n\n  return (\n    <div style={{ maxWidth: 600, margin: '0 auto', background: '#fff', borderRadius: 8, boxShadow: '0 2px 8px #0001', padding: 20 }}>\n      <div style={{ minHeight: 200, maxHeight: 400, overflowY: 'auto', marginBottom: 10 }}>\n        {messages.map((msg, idx) => (\n          <div key={idx} style={{ textAlign: msg.role === 'user' ? 'right' : 'left', margin: '8px 0' }}>\n            <div style={{ display: 'inline-block', background: msg.role === 'user' ? '#e6f3ff' : '#f5f5f5', padding: '8px 12px', borderRadius: 6, maxWidth: '90%' }}>\n              {msg.content}\n              {msg.table && renderTable(msg.table)}\n            </div>\n          </div>\n        ))}\n        <div ref={bottomRef} />\n      </div>\n      <form onSubmit={handleSend} style={{ display: 'flex', gap: 8 }}>\n        <input\n          type=\"text\"\n          value={input}\n          onChange={e => setInput(e.target.value)}\n          placeholder=\"Type a math prompt...\"\n          style={{ flex: 1, padding: 8, borderRadius: 4, border: '1px solid #ccc' }}\n          disabled={loading}\n        />\n        <button type=\"submit\" className=\"button\" disabled={loading || !input.trim()}>Send</button>\n      </form>\n      {loading && <div style={{ marginTop: 8, color: '#888' }}>Thinking...</div>}\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport ChatBot from './ChatBot';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>MCP SAS Viya Chatbot Demo</h1>\n      </header>\n      <main>\n        <ChatBot />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}